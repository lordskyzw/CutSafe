import java.io.*;
import java.net.*;

public class RapidResponseSystem {
    private static final String SERVER_URL = "http://example.com/api/location"; // Replace with your server URL
    private static final String DEVICE_ID = "ABC123"; // Replace with your device ID
    
    public static void main(String[] args) {
        try {
            // Get device's last known location
            String location = getLastKnownLocation();
            
            // Send location to server
            sendLocationToServer(location);
        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    //we used a try and catch block to save the program from breaking due to exception errors
    //we also want cleaner debugging 
    
    private static String getLastKnownLocation() {
        // Implement code to get device's last known location here
        // For example, you could use the GPS or network location services
        return "123.456,-78.901"; // Return a string in the format "latitude,longitude"
    }
    
    private static void sendLocationToServer(String location) throws IOException {
        URL url = new URL(SERVER_URL);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("POST");
        conn.setRequestProperty("Content-Type", "application/json; charset=UTF-8");
        conn.setRequestProperty("Accept", "application/json");
        conn.setDoOutput(true);
        
        // Create JSON payload
        String payload = String.format("{\"deviceId\":\"%s\",\"location\":\"%s\"}", DEVICE_ID, location);
        
        // Send payload to server
        try (OutputStream os = conn.getOutputStream()) {
            byte[] input = payload.getBytes("utf-8");
            os.write(input, 0, input.length);           
        }
        
        // Check response status code
        int statusCode = conn.getResponseCode();
        if (statusCode != 200) {
            throw new RuntimeException("Failed to send location to server: HTTP error code : " + statusCode);
        }
        
        // Read response from server
        try (BufferedReader br = new BufferedReader(new InputStreamReader((conn.getInputStream())))) {
            String output;
            while ((output = br.readLine()) != null) {
                System.out.println(output);
            }
        }
        
        conn.disconnect();
    }
}


import android.Manifest;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

public class MainActivity extends AppCompatActivity {

    private static final int REQUEST_LOCATION_PERMISSION = 1;
    private Button distressButton;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        distressButton = findViewById(R.id.distress_button);
        distressButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, REQUEST_LOCATION_PERMISSION);
                } else {
                    sendLocationToServer();
                    Toast.makeText(MainActivity.this, "Location sent to server", Toast.LENGTH_SHORT).show();
                }
            }
        });
    }

    private void sendLocationToServer() {
        // TODO: Implement the code to get the device's last known location and send it to the server
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        if (requestCode == REQUEST_LOCATION_PERMISSION) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                sendLocationToServer();
                Toast.makeText(this, "Location sent to server", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "Location permission denied", Toast.LENGTH_SHORT).show();
            }
        }
    }
}
